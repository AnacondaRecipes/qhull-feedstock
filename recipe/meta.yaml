{% set name = "qhull" %}
{% set version = "2020.2" %}
{% set sha256 = "59356b229b768e6e2b09a701448bfa222c37b797a84f87f864f97462d8dbc7c5" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ version }}.tar.gz
  url: https://github.com/qhull/{{ name }}/archive/{{ version }}.tar.gz
  sha256: {{ sha256 }}
  patches:
    - fix-osx-rpath.patch
    - windows.patch

build:
  number: 2
  run_exports:
    - {{ pin_subpackage('qhull', max_pin='x.x') }}

requirements:
  build:
    - {{ compiler('cxx') }}
    - cmake
    - ninja
    - make      # [unix]
    - patch     # [not win]
    - m2-patch  # [win]
  host:
  run:

test:
  commands:
    # Verify libraries.
    {% set qhull_libs = ["qhullcpp", "qhullstatic", "qhullstatic_r"] %}
    {% for each_qhull_lib in qhull_libs %}
    - test -f $PREFIX/lib/lib{{ each_qhull_lib }}.a                           # [unix]
    - if not exist %PREFIX%\\Library\\lib\\{{ each_qhull_lib }}.lib exit 1    # [win]
    {% endfor %}
    # [S. Bruens #69]
    # BUILD_SHARED_LIBS
    {% set qhull_dynlibs = ["qhull_r"] %}
    {% for each_qhull_lib in qhull_dynlibs %}
    - test -f $PREFIX/lib/lib{{ each_qhull_lib }}${SHLIB_EXT}                 # [unix]
    - if not exist %PREFIX%\\Library\\lib\\{{ each_qhull_lib }}.lib exit 1    # [win]
    - if not exist %PREFIX%\\Library\\bin\\{{ each_qhull_lib }}.dll exit 1    # [win]
    {% endfor %}
    - rbox c P0 D2 | qvoronoi s o
    - rbox c | qconvex FQ FV n | qhalf Fp
    - rbox 1000 D3 | qhull C-1e-4 FO Ts

about:
  home: https://www.qhull.org/
  license: Qhull
  license_family: Other
  license_file: COPYING.txt
  summary: Qhull computes the convex hull
  description: |
    Qhull computes the convex hull, Delaunay triangulation, Voronoi diagram, halfspace
    intersection about a point, furthest-site Delaunay triangulation, and furthest-site
    Voronoi diagram. The source code runs in 2-d, 3-d, 4-d, and higher dimensions. Qhull
    implements the Quickhull algorithm for computing the convex hull. It handles roundoff
    errors from floating point arithmetic. It computes volumes, surface areas, and
    approximations to the convex hull.
  doc_url: https://www.qhull.org/html
  dev_url: https://github.com/qhull/qhull

extra:
  recipe-maintainers:
    - sirokujira
